{"version":3,"sources":["Description.js","Home.js","Settings.js","Message.js","Messages.js","NavBar.js","ChatMessages.js","ChatShowingNoMessages.js","ChatMessagesDisplay.js","Chat.js","App.js","serviceWorker.js","index.js"],"names":["Description","props","handleShowDescriptionOnClick","setState","showDescription","state","prevProps","this","chuckNorrisQuote","console","log","className","onClick","Component","Home","randomUser","newUser","undefined","name","src","picture","large","alt","first","last","dob","age","Settings","settings","onChange","Radio","toggle","checked","smoker","vegetarian","single","withRouter","user","location","to","thumbnail","key","message","pathname","substring","formatMessage","date","Messages","randomUsers","map","NavBar","exact","ChatMessage","sentMessages","timeNow","Container","Row","Col","md","span","offset","sm","xs","ChatShowingNoMessages","ChatMessagesDisplay","Chat","showCurrentlyTyping","e","userMessage","target","value","sendMessageNow","preventDefault","Date","type","ourselves","App","getUser","fetch","then","response","json","data","results","getUsers","handleChangeSetting","settingName","path","render","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.13f89b76.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Home.css';\n\nclass Description extends Component{\n     constructor(props) {\n         super(props);\n\n         this.state = {\n             showDescription: false,\n         }\n\n        //  this.handleShowDescriptionOnClick = this.handleShowDescriptionOnClick.bind(\n        //     this \n        //   );\n\n     }\n\n     componentDidUpdate(prevProps) {\n         if(this.props.chuckNorrisQuote !== prevProps.chuckNorrisQuote){\n             this.setState({showDescription: false});\n         }\n\n     }\n\n     handleShowDescriptionOnClick = () => {\n\n            this.setState({ showDescription: !this.state.showDescription });\n     }\n\n\n\n\n    render (){\n        console.log(this.props.chuckNorrisQuote);\n        return(\n         <div className=\"container\">\n                <button onClick={this.handleShowDescriptionOnClick} >\n                 MORE INFO </button>\n                {this.state.showDescription ? \n                <div className=\"moreInfo\">\n                        <h4>{this.props.chuckNorrisQuote}</h4>\n                </div>: null}               \n         </div>\n        )\n    }\n}\n\nexport default Description;","import React from 'react';\nimport './Home.css';\nimport Description from './Description';\n\nconst Home = ({ randomUser, newUser, chuckNorrisQuote }) => {\n    return (\n        <div>\n            <div className=\"container\">\n                {\n                    randomUser.name !== undefined &&\n                    <div className=\"swipe-area\">\n                        <button onClick={newUser}> NOBODY LOVES YOU</button>\n                        <div className=\"wrapper\">\n                            <img className=\"mainImage\" src={randomUser.picture.large} alt=\"Tender user\" />\n                            <h1> {randomUser.name.first} {randomUser.name.last} </h1>\n                            <h2> {randomUser.dob.age} years old </h2>\n                        </div>\n                        <button> MARRY ME</button>\n                    </div>\n\n                }\n            </div>\n            <Description chuckNorrisQuote={chuckNorrisQuote}/>\n        </div>\n    )\n}\n\nexport default Home; ","import React from 'react'; \nimport './Settings.css';\nimport { Radio } from 'semantic-ui-react';\n\nconst Settings = ({ settings, onChange }) => {\n    return (\n        <div>\n            <h1> Settings </h1>\n            <div>\n                Smoker: <span><Radio toggle checked={settings.smoker} onChange={() => onChange('smoker')}/></span>\n            </div>\n            <div>\n                Vegetarian: <span><Radio toggle checked={settings.vegetarian} onChange={() => onChange('vegetarian')}/></span>\n            </div>\n            <div>\n                Single: <span><Radio toggle checked={settings.single} onChange={() => onChange('single')}/></span>\n            </div>\n        </div> \n    )\n}\n//These settings are connected to the state in the App through the string at the end of each one. Ex: Smoker is connected to \"smoker: false,\" in the App\n//thanks to the 'smoker' in \"onChange('smoker')}\". This means that if you switch the string text to 'Smoker' (with capital \"S\"), the radio toggle will\n//stop working.\n\nexport default Settings; ","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport './Message.css';\n\nconst Message = ({ user, location }) => {\n    const formatMessage = () => {\n        const message = user.message ? user.message : \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse lectus tortor, dignissim sit amet, adipiscing nec, ultricies sed, dolor. Cras elementum ultrices diam. Maecenas ligula massa, varius a, semper congue, euismod non, mi. Proin porttitor, orci nec nonummy molestie, enim est eleifend mi, non fermentum diam nisl sit amet erat. Duis semper. Duis arcu massa, scelerisque vitae, consequat in, pretium a, enim. Pellentesque congue. Ut in risus volutpat libero pharetra tempor. Cras vestibulum bibendum augue. Praesent egestas leo in pede. Praesent blandit odio eu enim. Pellentesque sed dui ut augue blandit sodales. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Aliquam nibh. Mauris ac mauris sed pede pellentesque fermentum. Maecenas adipiscing ante non diam sodales hendrerit.\"\n\n        if (location.pathname === '/messages') {\n            return `${message.substring(0, 140)}...`\n        }\n        else {\n            return `${message.substring(0, 15)}...`\n        }\n    }\n\n    return (\n\n        <div className=\"message\">\n            <div className=\"message-pict\">\n                <Link to=\"/chat\" className=\"link\">\n                    <img src={user.picture.thumbnail} alt=\"Tender user\" className=\"avatar\" />\n                </Link>\n            </div>\n            <div className='message-name'>\n                <Link to=\"/chat\" className='message-name'>\n                    {user.name.first} {user.name.last}\n                </Link>\n            </div>\n            <div className=\"message-content\">\n                <Link to=\"/chat\" key={user.name} className=\"link\">\n                    {formatMessage()}\n                </Link>\n            </div>\n            <div className=\"message-date\">\n                {user.date ? user.date : \"29 oct.\"}\n            </div>\n        </div>\n    )\n}\n\nexport default withRouter(Message);","\nimport Message from './Message';\nimport React, { Component } from 'react';\n\nclass Messages extends Component {\n    render() {\n        const { randomUsers } = this.props\n        return (\n            <div>\n                {\n                    randomUsers.map(user => {\n                        return <Message user={user} key={user.name.first} />\n                    })\n                }\n            </div>\n        )\n    }\n}\n\n\n\n\n\n\n\n\nexport default Messages; ","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport \"./NavBar.css\"\n\nconst NavBar = () => (\n  <nav className=\"menu\">\n    <ul>\n      <li><NavLink exact to=\"/\">Home</NavLink></li>\n      <li><NavLink exact to=\"/settings\">Settings</NavLink></li>\n      <li><NavLink exact to=\"/messages\">Messages</NavLink></li>\n      <li><NavLink exact to=\"/chat\">Chat</NavLink></li>\n    </ul>\n  </nav>\n);\n\nexport default NavBar; \n","import React from \"react\"\nimport \"./ChatMessages.css\"\nimport { Container, Row, Col } from \"react-bootstrap\";\n\n\nconst ChatMessage = ({sentMessages, timeNow}) => {\n\nreturn(\n//still need to add time \n    <Container>\n        <Row>\n        <Col  md={{ span: 4, offset: 8 }} sm={{ span: 5, offset: 7 }} xs={{ span: 8, offset: 4 }} >\n                {sentMessages.map ( message => (\n                    <div className=\"chatMessages-eachMessage\">\n                        <div className=\"chatMessages-newMessage\">\n                            <p> {message} </p>\n                        </div>\n                        <div className=\"chatMessages-spaceBetweenMessages\"></div>\n                    </div>\n                ))}\n            </Col>\n        </Row>\n    </Container>\n\n)\n}\nexport default ChatMessage; ","import React from \"react\";\nimport \"./ChatShowingNoMessages.css\"\n\nconst ChatShowingNoMessages = () => {\n\nreturn(\n    <div className=\"chat-noMessages\">\n        <img\n        className=\"tenderLogo\" \n        src=\"/paint-brush-heart-png.png\" alt=\"Tender Logo\"></img>\n        <h1> Go ahead, send them a message. <br/> Don't be shy! </h1>\n\n    </div>\n)\n}\nexport default ChatShowingNoMessages; ","import React from \"react\";\nimport ChatMessages from \"./ChatMessages\"; \nimport ChatShowingNoMessages from \"./ChatShowingNoMessages\";\nconst ChatMessagesDisplay = ({sentMessages, timeNow}) => {\n    if(sentMessages[0]){\n        return <ChatMessages sentMessages={sentMessages} timeNow={timeNow}/> \n    }else{\n        return <ChatShowingNoMessages/>\n    }\n}\n\nexport default ChatMessagesDisplay; \n\n//Component for opting between display sent messages or message of encouragement\n\n//for if condition: an empty array is always TRUE, so if array index 0 does not exist array will be false,\n// therefore }else{ return <ChatShowingNoMessages/> will be displayed. \n//This array is the state that holds sent messages and is initialized as an empty array.","import React, { Component } from 'react';\nimport './Chat.css';\nimport Messages from \"./Messages\";\nimport ChatMessagesDisplay from \"./ChatMessagesDisplay\"\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      userMessage: \"\",\n      sentMessages: [],\n      timeNow: \"still not changed\",\n    };\n  }\n\n  showCurrentlyTyping = e => {\n    this.setState({ userMessage: e.target.value });\n  }\n\n  sendMessageNow = e => {\n    e.preventDefault();\n    if (this.state.userMessage) {\n      this.setState((state) => {\n        return {\n          ...state,\n          sentMessages: [...state.sentMessages, state.userMessage],\n          timeNow: new Date(),\n          userMessage: \"\",\n        }\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"chat\">\n\n        <div className=\"chat-contacts\">\n          <Messages randomUsers={this.props.randomUsers} />\n        </div>\n\n        <div className=\"chat-spaceForMessages\">\n          <div className=\"chat-spaceForMessagesScroll\">\n            <ChatMessagesDisplay sentMessages={this.state.sentMessages} timeNow={this.state.timeNow} />\n          </div>\n\n          <form className=\"chat-chatForm\">\n            <input\n              type=\"text\"\n              className=\"chat-textInput\"\n              value={this.state.userMessage}\n              onChange={this.showCurrentlyTyping} />\n            <input\n              type=\"submit\"\n              className=\"chat-sendButton\"\n              value=\"Send\"\n              onClick={this.sendMessageNow} />\n          </form>\n        </div>\n\n      </div>\n\n    );\n  }\n}\n\nexport default Chat; ","import React, { Component } from 'react';\nimport { Route, BrowserRouter, Switch, NavLink } from 'react-router-dom';\nimport './App.css';\nimport Home from './Home';\nimport Settings from './Settings';\nimport Messages from './Messages';\nimport NavBar from './NavBar';\nimport Chat from './Chat';\n\nconst ourselves = [\n  {\n    name: {\n      first: 'Alexandra',\n      last: 'Santos',\n    },\n    picture: {\n      thumbnail: 'alex-tn.jpg',\n    },\n    message: 'Hey handsome! How are you?',\n    date: '5 nov.'\n  },\n  {\n    name: {\n      first: 'Inês',\n      last: 'Oliveira',\n    },\n    picture: {\n      thumbnail: 'ines-tn.jpg',\n    },\n    message: \"You make my booleans come true!!\",\n    date: '4 nov.'\n  },\n  {\n    name: {\n      first: 'Elena',\n      last: 'Ortega',\n    },\n    picture: {\n      thumbnail: 'elena-tn.jpg',\n    },\n    message: 'Holà que tal',\n    date: '3 nov.'\n  },\n\n  {\n    name: {\n      first: 'Angélina',\n      last: 'Riet',\n    },\n    picture: {\n      thumbnail: '/angelina-tn.jpg',\n    },\n    message: 'Voulez-vous coucher avec moi ce soir? ;)',\n    date: '31 oct.'\n  },\n]\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      randomUser: {\n        picture: {},\n        name: {},\n        dob: {},\n      },\n      randomUsers: [],\n      // isLoaded: false,\n      settings: {\n        smoker: false,\n        vegetarian: false,\n        single: false,\n        // Settings' default boolean values. This part is connected directly to the Settings component (more info in the Settings.js file). The other parts\n        // related to settings are only connected after passing by Setting.js. So, long story short, it goes the following way:\n        // App.js (this.state) [default in page] -> Settings.js [where the functionality to change first the radio toggle appears] -> App (router) [it connects\n        // the functionalities present in Settings.js back to App.js and where it takes these settings to their final function: where we'll make user\n        // interaction possible, thanks to the use of handleChangeSetting] -> App.js (handleChangeSetting) [the final stage of the settings, where we make\n        // the radio toggle switch whenever the user clicks in it]\n      },\n      chuckNorrisQuote: 'hello',\n    };\n  }\n\n  componentDidMount() {\n    this.getUser();\n    this.getUsers();\n  }\n\n  getUser = () => {\n    //get quote at the same time as a new user\n    fetch(\"https://api.chucknorris.io/jokes/random\")\n    .then(response => response.json())\n    .then( data => {\n        this.setState({\n            chuckNorrisQuote: data.value,\n\n           })\n       })\n\n    fetch(\"https://randomuser.me/api/?inc=gender,name,dob,picture\")\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          // isLoaded : true,\n          randomUser: data.results[0],\n        })\n      }\n    )\n  }\n\n  getUsers = () => {\n    fetch(\"https://randomuser.me/api/?results=10\")\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          // isLoaded : true,\n          randomUsers: [...ourselves, ...data.results],\n        })\n      }\n    )\n  }\n\n  // thanks to this part below, the user clicks in the settings toggle and the toggle turns true or false depending on the times they click.\n  //The handleChangeSetting below is connected to the Settings component thanks to the line {this.handleChangeSetting in the Router in the App}\n  handleChangeSetting = (settingName) => {\n    this.setState((state) => {\n      return {\n        ...state,\n        settings: {\n          ...state.settings, \n          [settingName]: !state.settings[settingName],\n        }\n      }\n    })\n  };\n\n  render() {\n        return (\n      <BrowserRouter>\n        <NavBar/>\n        <Switch>\n        <Route exact path=\"/\" render={() => <Home randomUser={this.state.randomUser} newUser={this.getUser} chuckNorrisQuote={this.state.chuckNorrisQuote}/>} />\n          <Route exact path=\"/settings\" render={() => <Settings settings={this.state.settings} onChange={this.handleChangeSetting} />} />\n          <Route exact path=\"/messages\" render={() => <Messages randomUsers={this.state.randomUsers} />} />\n          <Route exact path=\"/chat\" render={() => <Chat randomUsers={this.state.randomUsers} />} />\n        </Switch>\n\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}